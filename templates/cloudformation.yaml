AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Elastic Beanstalk Docker Environment with VPC, Dynamo, and Elasticache

Parameters:
  ACMCertificateARN:
    Type: String
    Description: The ARN of the ACM SSL Certificate for HTTPS
  GeneratedApiKey:
    Type: String
    Description: The API key generated in the application code
    NoEcho: true
  SolutionStackName:
    Type: String
    Description: The name of an Elastic Beanstalk supported platform version.
    Default: '64bit Amazon Linux 2 v3.4.11 running Docker'
  DockerImageURL:
    Type: String
    Description: URL of the Docker image in Amazon ECR.

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  MyPublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  MyRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociationOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPublicSubnetOne
      RouteTableId: !Ref MyRouteTable

  ApiKeySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: 'MyAPIKeySecret'
      Description: 'This secret stores the API key'
      SecretString: !Ref GeneratedApiKey

  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: MyDynamoDBTable
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  SubnetRouteTableAssociationTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPublicSubnetTwo
      RouteTableId: !Ref MyRouteTable

  SampleEnvironmentSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Elastic Beanstalk environment with load balancer'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  SampleRedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for ElastiCache Redis'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref SampleEnvironmentSecurityGroup

  SampleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: "/"
      Roles:
        - !Ref SampleRole

  SampleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: "/"
      Policies:
        - PolicyName: MySamplePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['elasticbeanstalk:*', 'ec2:*', 'elasticloadbalancing:*', 'autoscaling:*', 'cloudwatch:*', 'logs:*']
                Resource: "*"
        - PolicyName: ElasticacheAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'elasticache:*'
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'dynamodb:*'
                Resource: !GetAtt MyDynamoDBTable.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: '*'

  SampleApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: 'Twine'
      Description: 'Elastic Beanstalk Application running on Docker'

  MyAppVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      ApplicationName: !Ref SampleApplication
      Description: 'Version associated with the Dockerrun.aws.json'

  SampleEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !Ref SampleApplication
      EnvironmentName: 'Twine'
      SolutionStackName: !Ref SolutionStackName
      VersionLabel: !Ref MyAppVersion
      OptionSettings:
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: 'aws:elasticbeanstalk:application'
          OptionName: Application Healthcheck URL
          Value: HTTP:80/
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: ListenerEnabled
          Value: 'true'
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: SSLCertificateArns
          Value: !Ref ACMCertificateARN
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: DefaultProcess
          Value: default
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: Protocol
          Value: HTTPS
        - Namespace: 'aws:ec2:vpc'
          OptionName: VPCId
          Value: !Ref MyVPC
        - Namespace: 'aws:ec2:vpc'
          OptionName: Subnets
          Value: !Join [',', [!Ref MyPublicSubnetOne, !Ref MyPublicSubnetTwo]]
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: SecurityGroups
          Value: !Ref SampleEnvironmentSecurityGroup
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: IamInstanceProfile
          Value: !Ref SampleInstanceProfile
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: InstanceType
          Value: 't2.small'
        - Namespace: 'aws:elasticbeanstalk:container:docker'
          OptionName: ImageUrl
          Value: !Ref DockerImageURL
        - Namespace: 'aws:elasticbeanstalk:application:environment' 
          OptionName: REDIS_HOST
          Value: !GetAtt MyRedisCluster.PrimaryEndPoint.Address
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: REDIS_PORT
          Value: '6379'
      Tier:
        Name: WebServer
        Type: Standard
      LoadBalancerType: application

  MyElastiCacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: 'Subnet Group for ElastiCache Redis Cluster'
      SubnetIds:
        - !Ref MyPublicSubnetOne
        - !Ref MyPublicSubnetTwo

  MyRedisCluster:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      ReplicationGroupDescription: 'My cluster mode enabled Redis replication group'
      Engine: 'redis'
      CacheNodeType: 'cache.t2.micro'
      NumNodeGroups: 2
      ReplicasPerNodeGroup: 1
      AutomaticFailoverEnabled: true
      MultiAZEnabled: true
      CacheSubnetGroupName: !Ref MyElastiCacheSubnetGroup
      SecurityGroupIds:
        - !GetAtt SampleEnvironmentSecurityGroup.GroupId

Outputs:
  EnvironmentURL:
    Description: 'URL of the AWS Elastic Beanstalk Environment'
    Value: !GetAtt SampleEnvironment.EndpointURL

  RedisEndpoint:
    Description: 'The endpoint of the ElastiCache Redis cluster'
    Value: !GetAtt MyRedisCluster.PrimaryEndPoint.Address
